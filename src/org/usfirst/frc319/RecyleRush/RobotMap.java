// RobotBuilder Version

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.RecyleRush;
    

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftTalon;
    public static SpeedController driveTrainrightTalon;
    public static RobotDrive driveTrainRobotDrive;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static DoubleSolenoid rearClawClawPnuematic;
    public static DoubleSolenoid rearArmTopPnuematic;
    public static DoubleSolenoid rearArmBottomPnuematic;
    
    public static DoubleSolenoid rearArmChainPnuematic;
    
    public static Compressor pnuematicSystemCompressor;
    
    
    public static Ultrasonic driveTrainRearRangefinder;
    public static Ultrasonic driveTrainForeRangefinder;
    
    public static Ultrasonic elevatorRightDetector; // BACKUP
    
    public static Ultrasonic elevatorLeftDetector; //Backup
    
    public static Ultrasonic elevatorToteDetector;
    public static DoubleSolenoid toteClawClawPneumatic;
    public static DoubleSolenoid containerClawClawPnuematic;
    public static Encoder distancePIDDummyInput;
    public static SpeedController distancePIDDummyOutput;
    public static Encoder rotationPIDDummyInput;
    public static SpeedController rotationPIDDummyOuput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController activeCollectorLeftWheel;
    public static SpeedController activeCollectorRightWheel;
    public static DoubleSolenoid activeCollectorPnuematic;
    public static CANTalon rearShoulderMotor;
    public static CANTalon elevatorMotorLead;
    public static CANTalon elevatorMotorFollow;
    
    public static Relay elevatorLightSpike;
    public static void init() {
       
    	//-----------------PWM OUTPUTS----------------//
    	
        driveTrainleftTalon = new Talon(1);
       // LiveWindow.addActuator("DriveTrain", "leftTalon", (Talon) driveTrainleftTalon);
        
        driveTrainrightTalon = new Talon(0);
       // LiveWindow.addActuator("DriveTrain", "rightTalon", (Talon) driveTrainrightTalon);
        activeCollectorLeftWheel = new Talon(2);
        activeCollectorRightWheel = new Talon(3);
        
      //  elevatorLightSpike = new Relay(4);
        
        
        //-------------------DRIVETRAIN--------------//
        
        driveTrainRobotDrive = new RobotDrive(driveTrainleftTalon, driveTrainrightTalon);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        

        
        //-----------------DIO---------------------//
        
        driveTrainLeftEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(0.0349); //0.0349
        driveTrainLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        
        driveTrainRightEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(0.0349);//0.0349
        driveTrainRightEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        
        elevatorRightDetector = new Ultrasonic(4, 5);    
        elevatorLeftDetector = new Ultrasonic(6, 7);  
        //driveTrainRearRangefinder = new Ultrasonic(8, 9);
        
        //--------------COMPRESSOR-------------//
        
        pnuematicSystemCompressor = new Compressor(1);
        
        
        //-------------PNEUMATICS---------------//
  
                
      
        toteClawClawPneumatic = new DoubleSolenoid(0, 0, 1);              
        containerClawClawPnuematic = new DoubleSolenoid(0, 3, 2);      
        activeCollectorPnuematic = new DoubleSolenoid(0, 4, 5);
        
        rearClawClawPnuematic = new DoubleSolenoid(1, 0, 1);
        
        rearArmTopPnuematic = new DoubleSolenoid(1, 2, 3);
        rearArmBottomPnuematic = new DoubleSolenoid(1, 4, 5); 
        rearArmChainPnuematic = new DoubleSolenoid(1,6,7);
               
         
        
        
        //--------------CAN TALONS----------------//
        
        rearShoulderMotor = new CANTalon(2);
        elevatorMotorLead = new CANTalon(0);
        elevatorMotorFollow = new CANTalon(1);
        
        
       // LiveWindow.addActuator("Active Collector", "leftCollector", (Talon) activeCollectorLeftWheel);
        
        
        //LiveWindow.addActuator("Active Collector", "rightCollector", (Talon) activeCollectorRightWheel);
        
        
    }
}

