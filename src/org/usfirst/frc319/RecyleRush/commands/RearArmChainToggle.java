// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.RecyleRush.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc319.RecyleRush.Robot;

/**
 *
 */
public class  RearArmChainToggle extends Command {

    public RearArmChainToggle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.rearArm);
        requires(Robot.rearShoulder);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	if(Robot.rearShoulder.encoderPosition() < Robot.rearShoulder.maxHeightWhileTilted && Robot.rearShoulder.encoderPosition() > Robot.rearShoulder.chainLoweredMinHeight){
	    	if(Robot.rearArm.isLowered()){
	    		Robot.rearArm.chainRaise();
	    		System.out.println("Raising in safezone");
	    	}
	    	else{
	    		Robot.rearArm.chainLower();
	    		System.out.println("Lowering in safe zone");
	    	}
	    	
    	}
    	else{
    		Robot.rearArm.chainRaise();
    		System.out.println("Raising");
    	}
    	/*
    	if (Robot.rearShoulder.encoderPosition()>0){
    	Robot.rearArm.lower();
    	}
    	else{
    	System.out.println("Rear arm not lowered so it won't hit the ground");	
    	}
    	*/
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
