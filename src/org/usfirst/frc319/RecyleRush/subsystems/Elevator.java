// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.RecyleRush.subsystems;

import org.usfirst.frc319.RecyleRush.RobotMap;
import org.usfirst.frc319.RecyleRush.Robot;
import org.usfirst.frc319.RecyleRush.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {
   
   // Ultrasonic leftToteDetector = RobotMap.elevatorLeftToteDetector;   MADE INTO REAR DETEECTOR
    Ultrasonic ToteDetector = RobotMap.elevatorToteDetector;
  
    Ultrasonic leftToteDetector = RobotMap.elevatorLeftDetector;
    Ultrasonic rightToteDetector = RobotMap.elevatorRightDetector;
	CANTalon elevatorMotorLead =  RobotMap.elevatorMotorLead;
	CANTalon elevatorMotorFollow =  RobotMap.elevatorMotorFollow;
    
//	Relay elevatorLightSpike = RobotMap.elevatorLightSpike;
	
	double p = 1.8; //2.0
	double i = 0.01; //0.01
	double d = 5; //5
	double f = 0.0001;//0.0001
	
	int iZone = 100; //100
	double rampRate = 62;//was 36   was 62 for changed 1:1 gear ratio
	int upProfile = 0;
	
	double pDown = 1.2;
	double iDown = 0.01; //0.001
	double dDown = 5; //5
	double fDown = 0.0001;//0.0001
	
	int iZoneDown = 100; //100
	double rampRateDown = 36;
	
	int downProfile = 1;
	
	//double toteDetectionThreshold = 7.5;//changed from 2.5 during auto testing
	//double autoDetectionThreshhold = 7.5;
	
	public double numberOfTotesPossessed = 0;
	
	boolean isToteInCollector = false;
	
	public double elevatorHoldPosition=0;
	
	public double elevatorCushion = 1000;
	public double elevatorBottom = 0;
	public double elevatorTop = 11200;
	//.setPID(5, 0, 0);
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public Elevator(){
		elevatorMotorLead.changeControlMode(ControlMode.Position);
		elevatorMotorLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		elevatorMotorLead.setPID(p, i , d, f, iZone, rampRate, upProfile);
		elevatorMotorLead.setPID(pDown, iDown , dDown, fDown, iZoneDown, rampRateDown, downProfile);
		//elevatorMotorFollow.setPID(p, i, d,f,iZone,rampRate,upProfile);
		//elevatorMotorFollow.setPID(pDown, iDown , dDown, fDown, iZoneDown, rampRateDown, downProfile);
		elevatorMotorLead.reverseSensor(false);
		elevatorMotorLead.reverseOutput(true);
		//elevatorMotorLead.setProfile(upProfile);
		
		elevatorMotorFollow.changeControlMode(CANTalon.ControlMode.Follower);
		elevatorMotorFollow.set(elevatorMotorLead.getDeviceID());
		
		elevatorMotorLead.enableLimitSwitch(true, true);
	
		//rightToteDetector.setEnabled(true);   
    	//leftToteDetector.setEnabled(true);
    	rightToteDetector.setAutomaticMode(true);
    	leftToteDetector.setAutomaticMode(true);
	}
    public void initDefaultCommand() {
   
        setDefaultCommand(new ElevatorManualDrive());
//BROKEN CAUSES ELEVATOR TO RETURN TO ZERO
    	
    	//setDefaultCommand(new ElevatorDetectTote()); 	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
    }
    public void printEncoder(){
    	
    	
    	
    	//System.out.println("EncoderError = "+ elevatorMotorLead.getClosedLoopError());
        //System.out.println("EncPos= "+ elevatorMotorLead.getEncPosition());
    	//System.out.println("Is Top switch closed? = "+elevatorMotorLead.isFwdLimitSwitchClosed());
    	//System.out.println("Is Bottom switch closed? = " + elevatorMotorLead.isRevLimitSwitchClosed());
    	
    }
    public void floorPickUpPosition(){
    	elevatorMotorLead.set(0);
    	
    }
    public void ChuteCollectPosition(){
    	elevatorMotorLead.set(2500);
    }
    
    public void liftedTotePosition(){
    	elevatorMotorLead.set(3400);//was 3200 increased to 3400 for 3rd tote in auto
    }
    
    public void goToPosition(double position){
    	elevatorMotorLead.set(position);    	
    }
    public void crankItUpTo11(){
    	elevatorMotorLead.set(11000);//was 3200 increased to 3400 for 3rd tote in auto
    }
    
    public void finalAutoStackPosition(){
    	elevatorMotorLead.set(2750);//was 3200 increased to 3400 for 3rd tote in auto
    }
    public void stackOnTwoTotesPosition(){
    	elevatorMotorLead.set(4500);
    }
    public void toteChuteLoadingPosition(){
    	elevatorMotorLead.set(7000);
    }
    
    public void placeToteHeight(){
    	elevatorMotorLead.set(2500);
    }
    
    public void twoInchElevatorPosition(){
    	elevatorMotorLead.set(1500); //down from 1000
    }
    
    public void supportContainerElevatorPosition(){
    	elevatorMotorLead.set(7000);
    }
    
    public void liftContainerFromAutoStack(){
    	elevatorMotorLead.set(7500);
    }
    
    public boolean isFinished(){
    	double error = elevatorMotorLead.getEncPosition()-elevatorMotorLead.getSetpoint();
    	
    	int maxAbsError = 25;
    	
    	elevatorHoldPosition = elevatorMotorLead.getEncPosition();
    	
    	//System.out.println("Setpoint = "+ elevatorMotorLead.getSetpoint());
    	
    	/*
    	 * If you hit the limit switch, and your setpoint is below your current position,
    	 * your current position is now your zero since you can't go any lower.
    	 */
    	//System.out.println("error = " + error);
    	if(bottomLimitSwitch() && error > 0){
    		elevatorMotorLead.setPosition(0);
    		//System.out.println("Bottom limit switch hit - Elevator position set to zero");
    		return true;
    	}
    	else if (error < maxAbsError && error > -maxAbsError){   // ORIGINAL WAS 25 
    	//	System.out.println("Achieved Position, Error =" + error);
    		return true;
    	}
    	else{
    	//	System.out.println("Position Not Reached, Error = "+ error);
    		return false;    	
    	}
    }
    
    public void resetEncoder(){
    	elevatorMotorLead.setPosition(0);
    }
    public void disableCAN(){
    	elevatorMotorLead.disable();
    }
    public void enableCAN(){
    	elevatorMotorLead.enableControl();
    }
   // public boolean HomeBase(){
    	 
    //}
    public boolean topLimitSwitch(){
    	return elevatorMotorLead.isRevLimitSwitchClosed();
    	//false is open true is closed
    }
    public boolean bottomLimitSwitch(){
    	return elevatorMotorLead.isFwdLimitSwitchClosed();
    	//false is open true is closed
    }
    public int encoderPosition(){
    	return Robot.elevator.elevatorMotorLead.getEncPosition();
    }
    public double getSetpoint(){
    	return Robot.elevator.elevatorMotorLead.getSetpoint();
    }
    public double getEncoderPosition(){
    	return Robot.elevator.elevatorMotorLead.getEncPosition();
    }
    public void driveElevatorDown(double counter){
    	elevatorMotorLead.set(counter);
    }
    public void driveElevatorUp(double counter){
    	elevatorMotorLead.set(counter);
    }
    
   /* public boolean isToteReady(){
    	if (leftToteDetector.getRangeInches() < toteDetectionThreshold && rightToteDetector.getRangeInches() < toteDetectionThreshold){
    		return true;
    	}else{
    		return false;
    	}
    }*/
    
  /*  public boolean isToteWithinRange(double desiredRange){
    	if (ToteDetector.getRangeInches() < desiredRange){
    		return true;
    	}else{
    		return false;
    	}
    }*/
    public boolean isToteWithinRange(double desiredRange){
    	//System.out.println("IsToteWithin Range Left Distance: "+ leftToteDetector.getRangeInches());
    	//System.out.println("IsToteWithin Range Right Distance: "+ rightToteDetector.getRangeInches());
    	
    	if (leftToteDetector.getRangeInches() < desiredRange && rightToteDetector.getRangeInches() < desiredRange){
    		return true;
    	}else{
    		return false;
    	}
    }
    
    
    
    
    public void printDetectorValues(){
    	
    	double rightToteDistance = rightToteDetector.getRangeInches();
    	double leftToteDistance = leftToteDetector.getRangeInches();
    	boolean detected = isToteWithinRange(7.5);
    	System.out.println("Detected= "+ detected);
    	//System.out.print(rightToteDistance);
    }
    
 public double getRightDetectorValues(){
    	
    	double rightToteDistance = rightToteDetector.getRangeInches();
    	
    	return rightToteDistance;
    	
    	
    	//System.out.print(rightToteDistance);
    }
 public double getLeftDetectorValues(){
 	
	double leftToteDistance = leftToteDetector.getRangeInches();
 	
 	return leftToteDistance;
 	
 	
 	
 }
    public void enableDetectors(){
    	//rightToteDetector.setEnabled(true);
    	//leftToteDetector.setEnabled(true);
    	//rightToteDetector.setAutomaticMode(true);
    	//leftToteDetector.setAutomaticMode(true);
    }
    public boolean getToteInCollectorState(){
    	return isToteInCollector;
    }
    public void setToteInCollectorState(boolean state){
    	isToteInCollector = state;
   /* 	
    	if(isToteInCollector = true){
    		elevatorLightSpike.set(Value.kOn);
    	}
    	else{
    		elevatorLightSpike.set(Value.kOff);
    	}*/
    }
    
    public void selectUpProfile(){
    	elevatorMotorLead.setProfile(upProfile);
    	//elevatorMotorFollow.setProfile(upProfile);
    }
    public void selectDownProfile(){
    	elevatorMotorLead.setProfile(downProfile);
    	//elevatorMotorFollow.setProfile(downProfile);
    }
    public double getLeadMotorCurrent(){
    	double lead = elevatorMotorLead.getOutputCurrent();    
    	return lead;
    	}
    public double getFollowMotorCurrent(){
    	double follow = elevatorMotorFollow.getOutputCurrent(); 
    	
    	return follow;
    	}
    public double getCurrentDifference(){
    	double lead = elevatorMotorLead.getOutputCurrent();
    	double follow = elevatorMotorFollow.getOutputCurrent();
    	double difference = lead - follow;
    	return difference;
    	
    }
    
    public double getLeadMotorVoltage(){
    	double lead = elevatorMotorLead.getOutputVoltage();    
    	return lead;
    	}
    public double getFollowMotorVoltage(){
    	double follow = elevatorMotorFollow.getOutputVoltage(); 
    	
    	return follow;
    	}
    public double getVoltageDifference(){
    	double lead = elevatorMotorLead.getOutputVoltage();
    	double follow = elevatorMotorFollow.getOutputVoltage();
    	double difference = lead - follow;
    	return difference;
    	
    }
    
    public void manualDrive(double triggerValue)
    {
    	
    	if(triggerValue < 0.1 && triggerValue > -0.1){
    		
    		elevatorMotorLead.changeControlMode(ControlMode.Position);
    		elevatorMotorLead.set(elevatorHoldPosition);
    		
    		//System.out.println("In controlMode.Position");
    	}
    	else{
    		elevatorMotorLead.changeControlMode(ControlMode.PercentVbus);
    		double currentPosition = elevatorMotorLead.getEncPosition();
    		System.out.println("Trigger: " + triggerValue);
    		System.out.println("currentPosition: " + currentPosition);
    		// Top Cushion
    		if(currentPosition >= (elevatorTop-elevatorCushion) && triggerValue > 0){
    			double distanceFromHardLimit = Math.abs(currentPosition - elevatorTop);
    			double maxTriggerOutput = (distanceFromHardLimit/elevatorCushion);//*(distanceFromHardLimit/topSoftLimitOffset);
    			
    			if(triggerValue > maxTriggerOutput){
    				triggerValue = maxTriggerOutput;
    			}
    			
    			//System.out.println("TopCushion Active");
    		}
    		//Bottom Cushion
    		else if(currentPosition <= (elevatorBottom + elevatorCushion) && triggerValue < 0){
    			double distanceFromHardLimit = Math.abs(currentPosition - elevatorBottom);
    			double maxTriggerOutput = -(distanceFromHardLimit/elevatorCushion)*(distanceFromHardLimit/elevatorCushion);
    			if(maxTriggerOutput > -.1){
    				maxTriggerOutput = -.1;
    			}
    			if(triggerValue < maxTriggerOutput){
    				triggerValue = maxTriggerOutput;
    				System.out.println("Scaled Output: " + triggerValue);
    			}
    			//System.out.println("GroundCushion Active");
    			
    		}
    		
    		if(bottomLimitSwitch() && triggerValue < 0){
    			elevatorMotorLead.setPosition(0);
    			triggerValue = 0;
    		}
    		elevatorMotorLead.set(-triggerValue);
    		currentPosition = elevatorMotorLead.getEncPosition();
    		elevatorHoldPosition = currentPosition;
    	}
    }
    
}

