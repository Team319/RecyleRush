// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.RecyleRush.subsystems;

import org.usfirst.frc319.RecyleRush.RobotMap;


import org.usfirst.frc319.RecyleRush.Robot;
import org.usfirst.frc319.RecyleRush.commands.*;


import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftTalon = RobotMap.driveTrainleftTalon;
    SpeedController rightTalon = RobotMap.driveTrainrightTalon;
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    
    Ultrasonic rearRangefinder = RobotMap.driveTrainRearRangefinder;
    Ultrasonic foreRangefinder = RobotMap.driveTrainForeRangefinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    double distanceBetweenForeAndRear = 18;
    double wheelBase = 23.75; //inches // used below in getDegrees
    double wheelDiamater = 4; //inches // not used as it is incorporated into distance per pulse in the robot map
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveTrainArcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void arcadeDrive(double moveValue, double rotateValue){
    	//System.out.println("moveValue= " +moveValue +" RotateValue= "+ rotateValue);
    	
    	double scaledMoveValue = 0;
    	double scaledRotateValue = 0;
    	
    	if (moveValue < 0) {
    		scaledMoveValue = -(moveValue * moveValue);    		
    	} else {
    		scaledMoveValue = (moveValue * moveValue);
    	}
    	if (rotateValue < 0) {
    		scaledRotateValue = -(rotateValue * rotateValue);
    	} else {
    		scaledRotateValue = (rotateValue * rotateValue);
    	}
    	robotDrive.arcadeDrive(scaledMoveValue* 0.75 , scaledRotateValue* 0.75); //used to have  *0.7 scalars
    	 //Notice the minus in ^ front of the scaledMoveValue
    
    	//As this stands now... if you change this.... you change the AUTO... The semi- WORKING auto
    }
    public void manualArcadeDrive(double moveValue, double rotateValue){
    	robotDrive.arcadeDrive(moveValue, rotateValue);
    }
    public void printEncoders(){
    	System.out.println("Left=" + leftEncoder.getDistance()+"Right"+ rightEncoder.getDistance() );
    }
    
    //---USED FOR SWINGROTATE----//
    
    public void leftDrivetrain(double moveValue){
    	Robot.driveTrain.leftTalon.set(moveValue);
    }
    
    public void rightDrivetrain(double moveValue){
    	Robot.driveTrain.rightTalon.set(moveValue);
    }
    
    
    public double getDegreesFromEncoderValues(){
  		double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
  		double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
  		double robotArcLength = (leftDistance -rightDistance)/2; //This is stupid but "HEY" why not... account for drift 
  		
  		
  		double robotDegrees = 360*(robotArcLength/(Math.PI*wheelBase));
  		
  		//System.out.println("Degrees ="+ robotDegrees);
  		
  		
  		return robotDegrees;
  	}
    
    public double getModifiedDegreesFromEncoderValues(){
  		double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
  		double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
  		double robotArcLength = (leftDistance*.98 -rightDistance)/2; // FOR BOB 2 Left*0.95 This is stupid but "HEY" why not... account for drift 
  		
  		
  		double robotDegrees = 360*(robotArcLength/(Math.PI*wheelBase));
  		
  		//System.out.println("Degrees ="+ robotDegrees);
  		
  		
  		return robotDegrees;
  	}
    
    public double getDifferenceInEncoderValues(){
  		double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
  		double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
  		double difference = rightDistance - leftDistance;
  		
  	//	System.out.println("Left= "+leftDistance);
  	//	System.out.println("Right= "+rightDistance);
  	//	System.out.println("Encoder Difference: " + difference);
  		
  		return difference;
    }
    
    public double getDistanceFromEncoderValues(){
  		double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
  		double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
  		double robotDistance = (leftDistance + rightDistance)/2;
  		
  		
  		System.out.println("Distance= "+robotDistance);
  		
  		
  		return robotDistance;
  	}
    
    public double getLeftDistance(){
    	double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
    	return leftDistance;
    }
    
    public double getRightDistance(){
    	double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
    	return rightDistance;
    }
    
    
    
    
    public void printDegreesFromEncoderValues(){
  		double leftDistance = Robot.driveTrain.leftEncoder.getDistance();
  		double rightDistance = Robot.driveTrain.rightEncoder.getDistance();
  		double robotArcLength = (leftDistance-rightDistance)/2;
  		
  		
  		double robotDegrees = 360*(robotArcLength/(Math.PI*wheelBase));
  		
  		System.out.println("Degrees ="+ robotDegrees);
  		
    }
    
    public double getDegreesFromRangefinderValues(){
  		double rearDistance = Robot.driveTrain.rearRangefinder.getRangeInches();
  		double foreDistance = Robot.driveTrain.foreRangefinder.getRangeInches();
  		double robotArcLength = (rearDistance-foreDistance)/2;
  		
  		
  		double wallDegrees = 360*(robotArcLength/(Math.PI*distanceBetweenForeAndRear));
  		
  		//System.out.println("Degrees ="+ robotDegrees);
  		
  		
  		return wallDegrees;
  	}
    
  /*  public double getForeDistance(){
    	double foreDistance = Robot.driveTrain.foreRangefinder.getRangeInches();
    	return foreDistance;
    }*/
    
    /*
    public double getRearDistance (){
    	double rearDistance = Robot.driveTrain.rearRangefinder.getRangeInches() + 4.5;
    	return rearDistance;
    } */
    
    public void resetDistance(){
  		Robot.driveTrain.leftEncoder.reset();
  		Robot.driveTrain.rightEncoder.reset();
  	}
    
}

