// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.RecyleRush;

import org.usfirst.frc319.RecyleRush.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton aButton;
    public JoystickButton bButton;
    public JoystickButton xButton;
    public JoystickButton yButton;
    public JoystickButton startButton;
    public JoystickButton selectButton;
    public Joystick xboxController;
    
    public XboxLeftTrigger leftTrigger;
    public XboxRightTrigger rightTrigger;
    public DpadDown dpadDown;
    public DpadUp dpadUp;
    public DpadLeft dpadLeft;
    public DpadRight dpadRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    
   /* public Joystick smashBox;
    //buttons 8-14
    public JoystickButton button1; // Placeholder 8 //White checked //Bottom
    public JoystickButton button2; // Placeholder 9 //White checked //
    public JoystickButton button3; // Placeholder 13 // Green  checked
    public JoystickButton button4; // Placeholder 10 //Yellow checked
    public JoystickButton button5; // Placeholder 14 White checked
    public JoystickButton button6; // Placeholder 11 White checked
    public JoystickButton button7; // Placeholder 12 White checked // Top
    
    */
    public Boolean ybuttonState;
    
    public Joystick xboxController2;
    public JoystickButton aButton2;
    public JoystickButton bButton2;
    public JoystickButton xButton2;
    public JoystickButton yButton2;
    public JoystickButton startButton2;
    public JoystickButton selectButton2;
    public JoystickButton rightBumper2;
    public JoystickButton leftBumper2;
    
    
    public OI() {
    	
    	//Smashbox buttons and commands
    	
    	/*smashBox = new Joystick(1);
    	
    	//Yellow
    	button1 = new JoystickButton(smashBox, 8);
        button1.whenPressed(new RearShoulderGoToBottom()); // Change all commands as need be
        
        //Lowest White
        button2 = new JoystickButton(smashBox, 9);
        button2.whenPressed(new RearShoulderGoToAutoPickup());
        
        //Green
        button3 = new JoystickButton(smashBox, 13);
        button3.whenPressed(new RearClawToggle()); 
        
        //Middle White
        button4 = new JoystickButton(smashBox, 10);
        button4.whenPressed(new RearShoulderGoToStepHeight());
        
        //Red
        button5 = new JoystickButton(smashBox, 14);
        button5.whenPressed(new RearArmExtend()); // we no longer extend so use chainlower
        
        //3rd Highest White
        button6 = new JoystickButton(smashBox, 11);
        button6.whenPressed(new RearShoulderGoToThreeTote());
        
        //Highest White
        button7 = new JoystickButton(smashBox, 12);
        button7.whenPressed(new RearShoulderGoToFourTote()); //was RearShoulderGoToFourTote()
        
        		*/
        		
        	
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxController = new Joystick(0);
        
        rightBumper = new JoystickButton(xboxController, 6);
        rightBumper.whenPressed(new ActiveCollectorReject());
        leftBumper = new JoystickButton(xboxController, 5);
        leftBumper.whenPressed(new ElevatorOpenAll());
        selectButton = new JoystickButton(xboxController, 7);
        selectButton.whenPressed(new ContainerClawToggle());
        startButton = new JoystickButton(xboxController, 8);
        startButton.whenPressed(new ToteClawToggle());
        
        
        yButton = new JoystickButton(xboxController, 4);
        yButton.whenPressed(new FinalizeFourStack());
        bButton = new JoystickButton(xboxController, 2);
        bButton.whenPressed(new SmartAcquireTote());
        
        xButton = new JoystickButton(xboxController, 3);
        xButton.whenPressed(new ScoreTotes());
        aButton = new JoystickButton(xboxController, 1);
        aButton.whenPressed(new SmartCollectAndAlignWithOpenCollector());
        
        
        
        rightTrigger = new XboxRightTrigger(xboxController);
        //rightTrigger.whenPressed(new RearShoulderDriveUp());
        
        leftTrigger = new XboxLeftTrigger(xboxController);
        //leftTrigger.whenPressed(new RearShoulderDriveDown());
        
        dpadDown = new DpadDown(xboxController);
       dpadDown.whenPressed(new ActiveCollectorOpen());
        
        dpadUp = new DpadUp(xboxController);
        dpadUp.whenPressed(new ActiveCollectorClose());
        
        dpadLeft = new DpadLeft(xboxController);
        dpadLeft.whenPressed(new ElevatorReacquireContainerHeight());
        
        dpadRight = new DpadRight(xboxController);
        
        dpadRight.whenPressed(new RearArmExtend());
        
        //Elevator Stacker 
       
        xboxController2 = new Joystick(1);
        
        rightBumper2 = new JoystickButton(xboxController2, 6);
     //   rightBumper2.whenPressed(new ActiveCollectorReject());
        leftBumper2 = new JoystickButton(xboxController2, 5);
      //  leftBumper2.whenPressed(new ActiveCollectorPneumaticToggle());
        selectButton2 = new JoystickButton(xboxController2, 7);
     //   selectButton2.whenPressed(new ContainerClawToggle());
        startButton2 = new JoystickButton(xboxController2, 8);
       // startButton2.whenPressed(new ToteClawToggle());
        
        
        yButton2 = new JoystickButton(xboxController2, 4);
        yButton2.whenPressed(new RearShoulderPrepareToCapSix());
        bButton2 = new JoystickButton(xboxController2, 2);
        bButton2.whenPressed(new RearArmChainToggle());
        
        xButton2 = new JoystickButton(xboxController2, 3);
        xButton2.whenPressed(new RearClawToggle());
        aButton2 = new JoystickButton(xboxController2, 1);
   //     aButton2.whenPressed(new RearArmChainLower());
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("DriveTrainArcadeDrive", new DriveTrainArcadeDrive());

        SmartDashboard.putData("RearClawOpen", new RearClawOpen());

        SmartDashboard.putData("RearClawClose", new RearClawClose());

        SmartDashboard.putData("RearArmLower", new RearArmLower());

        SmartDashboard.putData("RearArmExtend", new RearArmExtend());

        SmartDashboard.putData("RearArmRetract", new RearArmRetract());

        SmartDashboard.putData("PnuematicSystemOn", new PnuematicSystemOn());

        SmartDashboard.putData("PneumaticSystemOff", new PneumaticSystemOff());

        SmartDashboard.putData("RearShoulderStop", new RearShoulderStop());

        SmartDashboard.putData("RearShoulderGoToTop", new RearShoulderGoToTop());

       

        SmartDashboard.putData("ToteClawOpen", new ToteClawOpen());

        SmartDashboard.putData("ToteClawClose", new ToteClawClose());

        SmartDashboard.putData("ContainerClawOpen", new ContainerClawOpen());

        SmartDashboard.putData("ContainerClawClose", new ContainerClawClose());

        SmartDashboard.putData("ElevatorDisplay", new ElevatorDisplay());

        SmartDashboard.putData("ElevatorFloorPickup", new ElevatorFloorPickup());

        SmartDashboard.putData("ElevatorToteRaised", new ElevatorToteRaised());

        SmartDashboard.putData("ReseEncoder", new ReseEncoder());

        SmartDashboard.putData("ElevatorHome", new ElevatorHome());

        SmartDashboard.putData("PrepareToAquire", new PrepareToAquire());

        SmartDashboard.putData("GrabAndLiftToClearance", new GrabAndLiftToClearance());

        SmartDashboard.putData("TotePlace", new TotePlace());

        SmartDashboard.putData("ElevatorTotePlaced", new ElevatorTotePlaced());

        SmartDashboard.putData("Stack", new Stack());

        SmartDashboard.putData("ElevatorDetectTote", new ElevatorDetectTote());

        SmartDashboard.putData("InitializeAutoStack", new InitializeAutoStack());

        SmartDashboard.putData("ScoreTotes", new ScoreTotes());

        SmartDashboard.putData("IncrementToteCount", new IncrementToteCount());

        SmartDashboard.putData("PrintNumberOfTotes", new PrintNumberOfTotes());
        
        SmartDashboard.putData("AutoFinalizeStack", new AutoFinalizeStack());

       

        SmartDashboard.putData("DistancePIDResetEncoders", new DistancePIDResetEncoders());

        

        SmartDashboard.putData("CollectContainer", new CollectContainer());

        SmartDashboard.putData("RearShoulderResetEncoder", new RearShoulderResetEncoder());

        SmartDashboard.putData("ScoreContainer", new ScoreContainer());
        
        SmartDashboard.putData("RearShoulderGoToBottom", new RearShoulderGoToBottom());

        SmartDashboard.putData("RearShoulderGoToOneTote", new RearShoulderGoToOneTote());

        SmartDashboard.putData("RearShoulderGoToTwoTote", new RearShoulderGoToTwoTote());

        SmartDashboard.putData("RearShoulderGoToThreeTote", new RearShoulderGoToThreeTote());

        SmartDashboard.putData("RearShoulderGoToFourTote", new RearShoulderGoToFourTote());
        
        SmartDashboard.putData("RearShoulderGoToFiveTote", new RearShoulderGoToFiveTote());
        
        SmartDashboard.putData("RearShoulderGoToSixTote", new RearShoulderGoToSixTote());
        
        SmartDashboard.putData("RearShoulderGoToStorageHeight", new RearShoulderGoToStorageHeight());



        SmartDashboard.putData("AutoRotate", new AutoRotate(140));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putData("AutoDriveStraight", new AutoDriveStraight(-0.64));
        
        SmartDashboard.putData("Set Collector Tote Presence False", new SetCollectorTotePresence(false));
    
        SmartDashboard.putData("RearShoulderGoToAutoPickup", new RearShoulderGoToAutoPickup());
    
        //SmartDashboard.putNumber("Elevator Position", Robot.elevator.encoderPosition());
        // ^ and below moved to teleop periodic 2/15/15
        //SmartDashboard.putNumber("RearArm Position", Robot.rearShoulder.encoderPosition());
        
        SmartDashboard.putData("ElevatorToteChuteLoadHeight", new ElevatorToteChuteLoadHeight());
        
        SmartDashboard.putData("ElevatorToteChuteCollectHeight", new ElevatorToteChuteCollectHeight());
        
        SmartDashboard.putData("ElevatorStackTwoTotesHeight", new ElevatorStackTwoTotesHeight());
    
        SmartDashboard.putData("Auto3Tote2Container", new Auto3Tote2Container());
        
        SmartDashboard.putData("ActiveCollectorStop", new ActiveCollectorStop());
        
        SmartDashboard.putData("ActiveCollectorReject", new ActiveCollectorReject());
        
        SmartDashboard.putData("ActiveCollectorCollect", new ActiveCollectorCollect());
        
        SmartDashboard.putData("SmartCollect", new SmartCollect());
        
        SmartDashboard.putData("SmartAcquireTote", new SmartAcquireTote());
        
        SmartDashboard.putData("AutoLastSequence", new AutoLastSequence());
        
        SmartDashboard.putData("FullAutoPitTest", new FullAutoPitTest());
        
        SmartDashboard.putData("SequentialOpen", new SequentialRelease());
        
        SmartDashboard.putData("SmartCollectWithOpenCollector", new SmartCollectWithOpenCollector());
        
        SmartDashboard.putData("ActiveCollectorKeepTote", new ActiveCollectorAlignTote());
        
        SmartDashboard.putData("TESTDriveSttraightThroughTote", new TESTDriveStraightThroughTote());
        
        SmartDashboard.putData("AutoTurn180Tester", new AutoRotate(137));
        
        SmartDashboard.putData("SmartCollectAndAlignWithOpenCollector", new SmartCollectAndAlignWithOpenCollector());
        
        
        SmartDashboard.putData("AutoTurn180", new AutoTurn180());
        SmartDashboard.putData("AutoDFWT90",new AutoDriveForwardWhileTurning90() );
        SmartDashboard.putData("AutoDriveForwardUntilElevatorIsFinished",new AutoDriveStraightUntilElevatorIsFinished());
        SmartDashboard.putData("DriveForwardAndLift",new AutoDriveForwardAndLift());
        SmartDashboard.putData("ActiveCollectorOpen",new ActiveCollectorOpen());
        SmartDashboard.putData("ActiveCollectorClose",new ActiveCollectorClose());
        SmartDashboard.putData("Rear Shoulder Reset Encoder",new RearShoulderResetEncoder());
        SmartDashboard.putData("AutoWallFollow", new AutoWallFollowDriveStraight(.6));
        
        SmartDashboard.putData("AutoLandfill", new AutoLandfill());
        
        SmartDashboard.putData("RearArmChainLower", new RearArmChainLower());
        SmartDashboard.putData("RearArmChainRaised", new RearArmChainRaised());
        
        SmartDashboard.putData("AutoRotateWhileKeepingTote", new AutoRotateLooseToleranceWhileKeepingTote(75));
        
        SmartDashboard.putData("AutoSwingRotateLooseToleranceWhileKeepingTote",new AutoSwingRotateLooseToleranceWhileKeepingTote(.4,75));
        SmartDashboard.putData("AutoLastTurnSequence", new AutoLastTurnSequence());
        
        SmartDashboard.putData("TestDetectWithCounter", new TestDetectWithCounter());
        
    }
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxboxController() {
        return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}